<MetroControls:MetroWindow
    x:Class="Eventful.View.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    DataContext="{Binding Source={StaticResource Locator}, Path=Main}"
    xmlns:MetroControls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:MvvmControls="http://www.galasoft.ch/mvvmlight"
    xmlns:Interactivity="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:Converters="clr-namespace:Eventful.Converters"
    xmlns:Properties="clr-namespace:Eventful.Properties"
    xmlns:ExtendedToolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
    xmlns:LocalControls="clr-namespace:Eventful.Controls"
    xmlns:toolkit="http://schemas.microsoft.com/wpf/2008/toolkit"
    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:NetworkModel="clr-namespace:NetworkModel;assembly=NetworkModel"
    xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
    xmlns:arrow="clr-namespace:Controls.ArrowLine"
    xmlns:dragdrop="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
    Title="Eventful" Height="768" Width="1024"
    Icon="../Images/Pencil.ico"
    ShowTitleBar="True"  
    SaveWindowPosition="True"
    ResizeMode="CanResizeWithGrip"
    EnableDWMDropShadow="True">

    <MetroControls:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="GridSplitterStyle" TargetType="GridSplitter">
                <Setter Property="Width">
                    <Setter.Value>2</Setter.Value>
                </Setter>
                <Setter Property="HorizontalAlignment">
                    <Setter.Value>Right</Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment">
                    <Setter.Value>Stretch</Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="HorizontalGridSplitterStyle" TargetType="GridSplitter">
                <Setter Property="Height">
                    <Setter.Value>2</Setter.Value>
                </Setter>
                <Setter Property="HorizontalAlignment">
                    <Setter.Value>Stretch</Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment">
                    <Setter.Value>Center</Setter.Value>
                </Setter>
            </Style>

            <Converters:BooleanToVisibilityConverter x:Key="BoolToVisibility" />
            <Converters:NonNullToVisibilityConverter x:Key="NonNullToVisibility" />
            <Converters:DateTimeToStringConverter x:Key="DateToString" />
            <Properties:Settings x:Key="Settings" />

            <ControlTemplate x:Key="nodeOutputTemplate">
                <Grid>
                    <Rectangle Width="{Binding Width}" Height="{Binding Height}" VerticalAlignment="Center" HorizontalAlignment="Center" Stroke="Green" />
                    <Label VerticalAlignment="Center" HorizontalAlignment="Center" Content="{Binding Index}" Width="{Binding Width}" Height="{Binding Height}" />
                    <Grid.ToolTip>
                        <ToolTip Content="{Binding Text}" />
                    </Grid.ToolTip>
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="nodeTemplate">
                <StackPanel>
                    <Grid>
                        <Rectangle RadiusX="4" RadiusY="4" Fill="White" Width="{Binding Width}" Height="{Binding Height}" Stroke="Blue" />
                        <TextBlock Text="{Binding Title}" TextWrapping="Wrap" Width="{Binding Width}" Height="{Binding Height}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ItemsControl ItemsSource="{Binding Options}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Thumb Template="{StaticResource nodeOutputTemplate}" Canvas.Left="{Binding Hotspot.InputX}" Canvas.Top="{Binding Hotspot.InputY}">
                                    <Interactivity:Interaction.Triggers>
                                        <Interactivity:EventTrigger EventName="DragDelta">
                                            <MvvmControls:EventToCommand Command="{Binding DragDeltaCommand}" PassEventArgsToCommand="True" />
                                        </Interactivity:EventTrigger>
                                        <Interactivity:EventTrigger EventName="DragCompleted">
                                            <MvvmControls:EventToCommand Command="{Binding DropCommand}" />
                                        </Interactivity:EventTrigger>
                                    </Interactivity:Interaction.Triggers>
                                </Thumb>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ControlTemplate>

        </ResourceDictionary>
    </MetroControls:MetroWindow.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding Path=SaveEventCommand}" 
                Key="S" 
                Modifiers="Control"/>
    </Window.InputBindings>

    <MetroControls:MetroWindow.RightWindowCommands>
        <MetroControls:WindowCommands>
            <Button Content="sync" Command="{Binding SyncDataCommand}" />
            <!--<Button Content="tags" Command="{Binding OpenTagLibraryCommand}" />-->
            <!--<Button Content="variables" Command="{Binding OpenVariableLibraryCommand}" />-->
            <Button Content="settings" Command="{Binding ShowSettingsCommand}" />
        </MetroControls:WindowCommands>
    </MetroControls:MetroWindow.RightWindowCommands>

    <MetroControls:MetroWindow.Flyouts>
        <MetroControls:FlyoutsControl>

            <MetroControls:Flyout Header="Settings" Position="Right" Width="350" Visibility="{Binding IsSettingsFlyoutVisible, Converter={StaticResource BoolToVisibility}}" CloseCommand="{Binding ShowSettingsCommand}">
                <Grid Margin="10,10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30" />
                        <RowDefinition Height="50" />
                        <RowDefinition Height="80" />
                        <RowDefinition Height="30" />
                        <RowDefinition Height="50" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="Author Name" FontSize="24" Grid.Row="0" Grid.Column="0" />
                    <Grid Grid.Row="1" Grid.Column="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Author}" VerticalAlignment="Center" Grid.Column="0"/>
                        <Button Content="Change" Command="{Binding ChangeAuthorCommand}" Width="60" Height="20" Grid.Column="1" VerticalAlignment="Center" />
                    </Grid>
                    <TextBlock Text="Data Folder" FontSize="24" Grid.Row="3" Grid.Column="0" />
                    <Grid Grid.Row="4" Grid.Column="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding StorageDirectory}" VerticalAlignment="Center" Grid.Column="0"/>
                        <Button Content="Change" Command="{Binding BrowseStorageDirectoryCommand}" Width="60" Height="20" Grid.Column="1" VerticalAlignment="Center" />
                    </Grid>
                </Grid>
            </MetroControls:Flyout>

        </MetroControls:FlyoutsControl>
    </MetroControls:MetroWindow.Flyouts>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="25" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="150" />
            <ColumnDefinition Width="150" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Row="0" Grid.Column="0" Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition Height="*" />
                <RowDefinition Height="30" />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="Decks" Grid.Column="0" FontSize="20" />
                <Button Content="+" IsEnabled="{Binding IsAddDeckButtonEnabled}" Command="{Binding AddDeckCommand}" Grid.Column="1" />
                <Button Content="-" IsEnabled="{Binding IsRemoveDeckButtonEnabled}" Command="{Binding RemoveDeckCommand}" Grid.Column="2" />
            </Grid>
            <TextBox Text="{Binding DeckFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MetroControls:TextBoxHelper.Watermark="Filter decks" Height="25" Grid.Row="2" />
            <DataGrid dragdrop:DragDrop.IsDropTarget="True" dragdrop:DragDrop.DropHandler="{Binding}" SelectionMode="Single" Margin="0,5" CanUserDeleteRows="False" CanUserAddRows="False" AutoGenerateColumns="False" HeadersVisibility="None" ItemsSource="{Binding DecksViewSource.View}" VerticalScrollBarVisibility="Auto" SelectedItem="{Binding SelectedDeck, Mode=TwoWay}" Grid.Row="1">
                <DataGrid.InputBindings>
                    <KeyBinding Command="{Binding Path=RemoveDeckCommand}" 
                                Key="Delete"/>
                    <!--<KeyBinding Command="{Binding Path=DuplicateDeckCommand}" 
                                Key="D"
                                Modifiers="Control" />-->
                </DataGrid.InputBindings>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Duplicate deck" Command="{Binding DuplicateDeckCommand}" />
                        <MenuItem Header="Delete deck" Command="{Binding RemoveDeckCommand}" />
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <Interactivity:Interaction.Triggers>
                    <Interactivity:EventTrigger EventName="BeginningEdit">
                        <MvvmControls:EventToCommand Command="{Binding ChangeDeckNameCommand}" />
                    </Interactivity:EventTrigger>
                </Interactivity:Interaction.Triggers>
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Title}" Width="*" />
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <GridSplitter Grid.Row="0" Grid.Column="0" Style="{StaticResource GridSplitterStyle}" />

        <Grid Grid.Row="0" Grid.Column="1" Margin="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition Height="*" />
                <RowDefinition Height="30" />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="Events" Grid.Column="0" FontSize="20" />
                <Button Content="+" IsEnabled="{Binding IsAddEventButtonEnabled}" Command="{Binding AddEventCommand}" Grid.Column="1" />
                <Button Content="-" IsEnabled="{Binding IsRemoveEventButtonEnabled}" Command="{Binding RemoveEventCommand}" Grid.Column="2" />
            </Grid>
            <TextBox Text="{Binding EventFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MetroControls:TextBoxHelper.Watermark="Filter events" Height="25" Grid.Row="2" />
            <DataGrid dragdrop:DragDrop.IsDragSource="True" SelectionMode="Single" Margin="0,5" CanUserDeleteRows="False" CanUserAddRows="False" AutoGenerateColumns="False" HeadersVisibility="None" ItemsSource="{Binding EventsViewSource.View}" VerticalScrollBarVisibility="Auto" SelectedItem="{Binding SelectedEvent, Mode=TwoWay}" Visibility="{Binding SelectedDeck, Converter={StaticResource NonNullToVisibility}}" Grid.Row="1">
                <DataGrid.InputBindings>
                    <KeyBinding Command="{Binding Path=DuplicateEventCommand}" 
                                Key="D" 
                                Modifiers="Control"/>
                    <KeyBinding Command="{Binding Path=RemoveEventCommand}" 
                                Key="Delete"/>
                </DataGrid.InputBindings>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="View event in new window" Command="{Binding OpenNewEventWindowCommand}" />
                        <MenuItem Header="Duplicate event" Command="{Binding DuplicateEventCommand}" />
                        <MenuItem Header="Delete event" Command="{Binding RemoveEventCommand}" />
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <Interactivity:Interaction.Triggers>
                    <Interactivity:EventTrigger EventName="BeginningEdit">
                        <MvvmControls:EventToCommand Command="{Binding ChangeEventNameCommand}" />
                    </Interactivity:EventTrigger>
                </Interactivity:Interaction.Triggers>
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Title}" Width="*" />
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <GridSplitter Grid.Row="0" Grid.Column="1" Visibility="{Binding SelectedEvent, Converter={StaticResource NonNullToVisibility}}" Style="{StaticResource GridSplitterStyle}" />

        <Grid Visibility="{Binding SelectedEvent, Converter={StaticResource NonNullToVisibility}}" Grid.Row="0" Grid.Column="3">
            <Grid.RowDefinitions>
                <RowDefinition Height="85" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="40" />
                    <RowDefinition Height="40" />
                    <RowDefinition Height="10" />
                </Grid.RowDefinitions>
                <StackPanel Orientation="Horizontal" Grid.Row="0">
                    <TextBlock Text=" > " FontSize="28" />
                    <TextBlock Text="{Binding SelectedDeck.Title}" FontSize="28" />
                    <TextBlock Text=" > " FontSize="28" />
                    <TextBlock Text="{Binding SelectedEvent.Title}" FontSize="28">
                        <Interactivity:Interaction.Triggers>
                            <Interactivity:EventTrigger EventName="MouseDown">
                                <MvvmControls:EventToCommand Command="{Binding ChangeEventNameCommand}" CommandParameter="{Binding SelectedEvent}" />
                            </Interactivity:EventTrigger>
                        </Interactivity:Interaction.Triggers>
                    </TextBlock>
                    <TextBlock Text=" > " FontSize="28" Visibility="{Binding SelectedScreen, Converter={StaticResource NonNullToVisibility}}" />
                    <TextBlock Text="{Binding SelectedScreen.Title}" FontSize="28">
                        <Interactivity:Interaction.Triggers>
                            <Interactivity:EventTrigger EventName="MouseDown">
                                <MvvmControls:EventToCommand Command="{Binding ChangeScreenNameCommand}" CommandParameter="{Binding SelectedScreen}" />
                            </Interactivity:EventTrigger>
                        </Interactivity:Interaction.Triggers>
                    </TextBlock>
                </StackPanel>
                <StackPanel Margin="5,5,0,5" Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
                    <Button HorizontalAlignment="Left" Grid.Row="1" Grid.Column="0" Content="Save" Command="{Binding SaveEventCommand}" Width="80" IsEnabled="{Binding SelectedEvent.IsChanged}" />
                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal" Grid.Row="1" Margin="10,0,0,0">
                        <TextBlock Text="Last saved by " FontWeight="Light" FontSize="12" />
                        <TextBlock Text="{Binding SelectedEvent.Author}" FontWeight="Bold" FontSize="12" />
                        <TextBlock Text=" on " FontWeight="Light" FontSize="12" />
                        <TextBlock Text="{Binding SelectedEvent.Date, Converter={StaticResource DateToString}}" FontWeight="Normal"  FontSize="12" />
                    </StackPanel>
                </StackPanel>
                <Border Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            </Grid>

            <Grid x:Name="screensGrid" Grid.Row="1" Grid.Column="0" Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="30" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="Screens" Grid.Column="0" FontSize="20" />
                    <Button Content="+" IsEnabled="{Binding IsAddScreenButtonEnabled}" Command="{Binding AddScreenCommand}" Grid.Column="1" />
                    <Button Content="-" IsEnabled="{Binding IsRemoveScreenButtonEnabled}" Command="{Binding RemoveScreenCommand}" CommandParameter="{Binding SelectedScreen}" Grid.Column="2" />
                </Grid>
                <ScrollViewer PanningMode="Both" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.Row="1" Grid.Column="0">
                    <ScrollViewer.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Add new screen" Command="{Binding AddScreenCommand}" ToolTip="Create a new screen for this event"/>
                        </ContextMenu>
                    </ScrollViewer.ContextMenu>
                    <Interactivity:Interaction.Triggers>
                        <Interactivity:EventTrigger EventName="MouseLeftButtonUp">
                            <MvvmControls:EventToCommand Command="{Binding DeselectSelectedScreenCommand}" />
                        </Interactivity:EventTrigger>
                    </Interactivity:Interaction.Triggers>
                    <Canvas Width="10000" Height="10000">
                        <ItemsControl ItemsSource="{Binding Connections}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <arrow:ArrowLine Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibility}}" X1="{Binding SourceX}" Y1="{Binding SourceY}" X2="{Binding Target.InputX}" Y2="{Binding Target.InputY}" Stroke="Black" StrokeThickness="2" ArrowEnds="Middle" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <ItemsControl ItemsSource="{Binding ScreensViewSource.View}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style>
                                    <Setter Property="Canvas.Left" Value="{Binding X}" />
                                    <Setter Property="Canvas.Top" Value="{Binding Y}" />
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Thumb ScrollViewer.CanContentScroll="True" Focusable="True" Template="{StaticResource nodeTemplate}">
                                        <Thumb.InputBindings>
                                            <KeyBinding Command="{Binding Main.RemoveScreenCommand, Source={StaticResource Locator}}"
                                            CommandParameter="{Binding}" Key="Delete" />
                                        </Thumb.InputBindings>
                                        <Thumb.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Header="Rename screen" Command="{Binding Main.ChangeScreenNameCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}" />
                                                <MenuItem Header="Duplicate screen" Command="{Binding Main.DuplicateScreenCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}" />
                                                <MenuItem Header="Delete screen" Command="{Binding Main.RemoveScreenCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}" />
                                            </ContextMenu>
                                        </Thumb.ContextMenu>
                                        <Interactivity:Interaction.Triggers>
                                            <Interactivity:EventTrigger EventName="DragDelta">
                                                <MvvmControls:EventToCommand Command="{Binding DragDeltaCommand}" PassEventArgsToCommand="True" />
                                            </Interactivity:EventTrigger>
                                            <Interactivity:EventTrigger EventName="GotFocus">
                                                <MvvmControls:EventToCommand Command="{Binding GotFocusCommand}" />
                                            </Interactivity:EventTrigger>
                                        </Interactivity:Interaction.Triggers>
                                    </Thumb>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Canvas>
                </ScrollViewer>
                <TextBox Text="{Binding ScreenFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MetroControls:TextBoxHelper.Watermark="Filter screens" Height="25" Grid.Row="2" />
            </Grid>
            <GridSplitter Grid.Row="1" Grid.Column="0" Visibility="{Binding SelectedEvent}" Style="{StaticResource GridSplitterStyle}" />

            <TextBlock Text="Select a screen to start editing." Grid.Row="1" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" />
            <Grid Grid.Row="1" Grid.Column="1" Margin="5" Visibility="{Binding SelectedScreen, Converter={StaticResource NonNullToVisibility}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="150" />
                </Grid.RowDefinitions>

                <LocalControls:MvvmTextEditor Grid.Row="0" Grid.Column="1" HorizontalScrollBarVisibility="Hidden" DocumentText="{Binding SelectedScreen.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalScrollBarVisibility="Auto" SyntaxHighlighting="XML" FontFamily="Consolas" FontSize="10pt">
                    <!--AutocompleteTrees="{Binding AutocompleteTrees, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" -->
                    <Interactivity:Interaction.Behaviors>
                        <LocalControls:SpellCheckBehavior />
                    </Interactivity:Interaction.Behaviors>
                </LocalControls:MvvmTextEditor>
                <GridSplitter Grid.Row="1" Style="{StaticResource HorizontalGridSplitterStyle}" />

                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <DataGrid Grid.Column="0" CanUserAddRows="False" SelectionMode="Single" AutoGenerateColumns="False" HeadersVisibility="None" SelectedItem="{Binding SelectedOption, Mode=TwoWay}" ItemsSource="{Binding SelectedScreen.Options}">
                        <DataGrid.Columns>
                            <DataGridTextColumn SortDirection="Ascending" Header="Index" Binding="{Binding Index}" IsReadOnly="True" Width="10" />
                            <DataGridTextColumn Header="Text" Binding="{Binding Text}" Width="*" />
                        </DataGrid.Columns>
                    </DataGrid>
                    <Grid Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="0">
                            <Button Content="+" Command="{Binding AddOptionCommand}" />
                            <Button Content="-" IsEnabled="{Binding IsRemoveOptionButtonEnabled}" Command="{Binding RemoveOptionCommand}" />
                        </StackPanel>
                        <StackPanel Grid.Row="1" VerticalAlignment="Bottom">
                            <Button FontFamily="Marlett" Content="5" IsEnabled="{Binding IsRemoveOptionButtonEnabled}" Command="{Binding MoveOptionUpCommand}" />
                            <Button FontFamily="Marlett" Content="6" IsEnabled="{Binding IsRemoveOptionButtonEnabled}" Command="{Binding MoveOptionDownCommand}" />
                        </StackPanel>
                    </Grid>
                </Grid>
            </Grid>
        </Grid>

        <Border Visibility="{Binding IsStatusbarVisible, Converter={StaticResource BoolToVisibility}}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
        <Grid Visibility="{Binding IsStatusbarVisible, Converter={StaticResource BoolToVisibility}}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="80" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="15" />
                <ColumnDefinition Width="130" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="15" />
                <ColumnDefinition Width="145" />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <TextBlock Text="Decks loaded: " Grid.Column="0" />
            <TextBlock Text="{Binding Decks.Count}" Grid.Column="1" />
            <TextBlock Text="Events in selected deck: " Visibility="{Binding SelectedDeck, Converter={StaticResource NonNullToVisibility}}" Grid.Column="3" />
            <TextBlock Text="{Binding SelectedDeck.Events.Count}" Grid.Column="4" />
            <TextBlock Text="Screens in selected event: " Visibility="{Binding SelectedEvent, Converter={StaticResource NonNullToVisibility}}" Grid.Column="6" />
            <TextBlock Text="{Binding SelectedEvent.Screens.Count}" Grid.Column="7" />
        </Grid>

    </Grid>
</MetroControls:MetroWindow>
